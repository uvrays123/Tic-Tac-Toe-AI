{"version":3,"sources":["components/choosePlayer.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Player","e","preventDefault","this","props","player","target","value","currentPlayer","onSubmit","handleForm","type","name","handleai","React","Component","Status","setPlayer","setCurrentPlayer","winner","evaluate","board","handleSetPlayer","renderHtml","App","state","Array","fill","human","computer","i","newBoard","setState","comp","console","log","move","bestScore","setBoard","score","minimax","checkWinner","checkEquals","depth","isMax","alpha","beta","isMovesLeft","index","bestMove","a","b","c","win","status","map","box","className","key","onClick","handleClick","render","renderBoxes","reset","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b17b494.chunk.js","sourcesContent":["import React from 'react';\n\nclass Player extends React.Component {\n\n  handleForm(e) {\n    e.preventDefault();\n    this.props.player(e.target.player.value);\n  }\n\n  handleai(e) {\n    e.preventDefault();\n    this.props.currentPlayer(e.target.player.value);\n  }\n\n  render() {\n    return(\n      <div>\n        <form onSubmit={(e) => this.handleForm(e)}>\n          <label>\n            Player X\n            <input type=\"radio\" name=\"player\" value=\"X\" />\n          </label>\n\n          <label>\n            Player O\n            <input type=\"radio\" name=\"player\" value=\"O\" />\n          </label>\n\n          <input type=\"Submit\" value=\"Start\" />\n\n        </form>\n        <br />\n        <form onSubmit={(e)=> this.handleai(e)} >\n          <label>\n            Computer Starts First\n            <input type=\"radio\" name=\"player\" value=\"ai\" />\n          </label>\n\n          <input type=\"Submit\" value=\"Start\" />\n        </form>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React, {Component} from 'react';\nimport Player from './choosePlayer';\n\nclass Status extends Component {\n\n  handleSetPlayer(e) {\n    this.props.setPlayer(e);\n  }\n\n  currentPlayer(e) {\n    this.props.setCurrentPlayer(e);\n  }\n\n  renderHtml() {\n    if(this.props.winner) {\n      if(this.props.evaluate(this.props.board) === 0) {\n        return(\n          <div>\n            <h2> The Match is Tied! </h2>\n          </div>\n        );\n      }\n      else {\n        return (\n          <div>\n          <h2>Winner is {this.props.winner}</h2>\n          </div>\n        );\n      }\n    }\n    else if(this.props.currentPlayer === \"ai\") {\n      return (\n        <div>\n          <h2>Computer is Thinking</h2>\n        </div>\n      );\n    }\n    else {\n      return (\n        this.props.player ? ( this.props.currentPlayer === \"ai\" ? <h2>Computer is Thinking!</h2> :\n        <h2>Human's Chance- Player is {this.props.player} </h2> ):\n        <div><Player player={(e) => {this.handleSetPlayer(e)}}  currentPlayer={(e) => {this.currentPlayer(e)}}/></div>\n      );\n    }\n  }\n\n  render() {\n    return (<span>{this.renderHtml()}</span>);\n  }\n}\n\nexport default Status;\n","import React from 'react';\nimport './App.css';\n//import Player from './components/choosePlayer';\nimport Status from './components/Status';\n//import Computer from './components/aiComp';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board : Array(9).fill(null),\n      player: null,\n      winner: null,\n      human: null,\n      computer: null,\n      currentPlayer: 'human',\n      i: 0\n    };\n  }\n\n\n  setBoard(newBoard) {\n    this.setState({\n      board: newBoard\n    });\n  }\n\n  bestMove(comp) {\n    console.log(`computer value coming in ${comp}`);\n    let newBoard = this.state.board;\n    let bestScore = comp === \"X\" ? -1000 : +1000;\n    let move;\n    for(let i = 0; i < 9; i++) {\n        if(newBoard[i] === null) {\n          newBoard[i] = comp;\n          this.setBoard(newBoard);\n          if(comp === \"X\") {\n            let score = this.minimax(newBoard, 0 , false, -1000, 1000);\n            newBoard[i] = null;\n            this.setBoard(newBoard);\n            if(score > bestScore) {\n              bestScore = score;\n              move = i;\n            }\n          }\n          if(comp === \"O\") {\n            let score = this.minimax(newBoard, 0, true, -1000, 1000);\n            newBoard[i] = null;\n            this.setBoard(newBoard);\n            if(score < bestScore) {\n              bestScore = score;\n              move = i;\n            }\n          }\n        }\n    }\n    //console.log(\"State before error- \");\n    //console.log(this.state);\n    newBoard[move] = comp;\n    this.setState({\n      board: newBoard,\n      currentPlayer: 'human'\n    });\n    console.log(\"Computer played move\");\n    this.checkWinner();\n\n  }\n\n  isMovesLeft(board) {\n    for(let i = 0; i < 9; i++) {\n      if(board[i] === null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  evaluate(board) {\n    console.log(\"EVALUATING...\");\n    for(let i = 0; i < 9; i+=3) {\n      if(this.checkEquals(board[i], board[i+1], board[i+2])) {\n        if(board[i] === \"X\") {\n          return 10;\n        }\n        if(board[i] === \"O\") {\n          return -10;\n        }\n      }\n    }\n    //VERTICAL\n    for(let i = 0; i < 3; i++) {\n      if(this.checkEquals(board[i], board[i+3], board[i+6])) {\n        if(board[i] === \"X\") {\n          return 10;\n        }\n        if(board[i] === \"O\") {\n          return -10;\n        }\n      }\n    }\n\n    //DIAGONAL\n    if(this.checkEquals(board[0], board[4], board[8])) {\n      if(board[0] === \"X\") {\n        return 10;\n      }\n      if(board[0] === \"O\") {\n        return -10;\n      }\n    }\n\n    if(this.checkEquals(board[2], board[4], board[6])) {\n      if(board[2] === \"X\") {\n        return 10;\n      }\n      if(board[2] === \"O\") {\n        return -10;\n      }\n    }\n    return 0;\n  }\n\n  minimax(board, depth, isMax, alpha, beta) {\n    let score = this.evaluate(board);\n    console.log(`Score is ${score}`);\n    if(score === 10) {\n      return 10;\n    }\n    if(score === -10) {\n      return -10;\n    }\n    if(this.isMovesLeft(board) === false) {\n      return 0;\n    }\n\n    if(isMax) {\n      let bestScore = -1000;\n      for(let i = 0;i < 9; i++) {\n          if(board[i] === null) {\n            board[i] = \"X\";\n            this.setBoard(board);\n            let score = this.minimax(board, depth+1, false, alpha, beta);\n            board[i] = null;\n            this.setBoard(board);\n            if(score >= bestScore) {\n              bestScore = score;\n            }\n            if(bestScore >= alpha) {\n              alpha = bestScore;\n            }\n            if(beta <= alpha) {\n              break;\n            }\n          }\n      }\n      return bestScore;\n    }\n    else {\n      let bestScore = +1000;\n      for(let i = 0; i < 9; i++) {\n          if(board[i] === null) {\n            board[i] = \"O\";\n            this.setBoard(board);\n            let score = this.minimax(board, depth+1, true, alpha, beta);\n            board[i] = null;\n            this.setBoard(board);\n            if(score <= bestScore) {\n              bestScore = score;\n            }\n            if(bestScore <= beta) {\n              beta = bestScore;\n            }\n            if(beta <= alpha) {\n              break;\n            }\n          }\n      }\n      return bestScore;\n    }\n\n\n  }\n\n  update(index) {\n    this.setState({\n      i: index\n    });\n  }\n\n  handleClick(index) {\n    if(this.state.currentPlayer === 'human') {\n      if(this.state.player && !this.state.winner) {\n\n        let newBoard = this.state.board;\n        if(this.state.board[index] === null) {\n          newBoard[index] = this.state.player;\n          this.setState({\n            board: newBoard,\n            currentPlayer: 'ai'\n          });\n          this.checkWinner();\n            console.log(\"Computer Thinking\");\n            let comp = this.state.player === \"X\" ? \"O\" : \"X\";\n            this.bestMove(comp);\n        }\n      }\n    }\n  }\n\n  checkEquals(a, b, c) {\n    return (a === b && b === c && a !== null)\n  }\n\n  checkWinner() {\n    let win = null;\n    console.log(\"Entered Winner\");\n    //HORIZONTAL\n    for(let i = 0; i < 9; i+=3) {\n      if(this.checkEquals(this.state.board[i], this.state.board[i+1], this.state.board[i+2])) {\n        win = this.state.board[i];\n      }\n    }\n    //VERTICAL\n    for(let i = 0; i < 3; i++) {\n      if(this.checkEquals(this.state.board[i], this.state.board[i+3], this.state.board[i+6])) {\n        win = this.state.board[i];\n      }\n    }\n\n    //DIAGONAL\n    if(this.checkEquals(this.state.board[0], this.state.board[4], this.state.board[8])) {\n      win = this.state.board[0];\n    }\n\n    if(this.checkEquals(this.state.board[2], this.state.board[4], this.state.board[6])) {\n      win = this.state.board[2];\n    }\n\n      if(win !== null) {\n        this.setState({\n          winner: win\n        });\n      }\n  }\n\n  setPlayer(player) {\n    this.setState({\n      player: player\n    });\n  }\n\n  setCurrentPlayer(player) {\n    this.setState({\n      currentPlayer: player\n    });\n    if(player === \"ai\") {\n      this.setPlayer(\"O\");\n      this.status(\"imm\");\n      this.bestMove(\"X\");\n    }\n  }\n\n  renderBoxes() {\n    return this.state.board.map(\n      (box, index) =>\n      <div className=\"box\"\n      key={index}\n      onClick={() => this.handleClick(index)}>\n      {box}\n      </div>\n    );\n  }\n\n  reset() {\n    this.setState({\n      player: null,\n      winner: null,\n      board: Array(9).fill(null),\n      currentPlayer: 'human',\n      human: null,\n      computer: null\n    });\n  }\n\n  status(value) {\n    if(value === \"imm\") {\n      this.render(\"Computer is Thinking!\");\n    }\n    if(value === \"ai\")\n    return \"Computer is Thinking!\";\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Tic Tac Toe</h1>\n        <Status player={this.state.player} setPlayer={(e) => {this.setPlayer(e)}}\n          winner={this.state.winner} setCurrentPlayer={(e) => {this.setCurrentPlayer(e)}}\n          currentPlayer={this.state.currentPlayer} evaluate={(e) => {this.evaluate(e)}} board={this.state.board}\n        />\n        <h2>\n          {this.status(this.state.currentPlayer)}\n        </h2>\n          <div className=\"board\">\n            {this.renderBoxes()}\n          </div>\n          <button onClick={() => this.reset()}>Reset</button>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n\n\n\n\n\n\n//USELESS CODE\n\n//HANDLE CLICK\n\n/*let val = this.state.i + 1;\nconsole.log(\"i- \"+val);\nthis.update(val);\nconsole.log(this.state);\nlet newBoard = this.state.board;\nif(val === 1) {\n  this.human(this.state.player);\n  if(this.state.board[index] === null) {\n    newBoard[index] = this.state.player;\n    //let newPlayer = this.state.player === \"X\" ? \"O\" : \"X\";\n\n    this.setState({\n      board: newBoard,\n      currentPlayer: 'ai'\n    });\n    this.checkWinner();\n    //let fluff = <Computer board= {this.state.board} checkWinner={() => this.checkWinner()}\n    //setBoard={(e) => this.setBoard(e)} comp={this.state.computer} />\n    let comp = this.state.player === \"X\" ? \"O\" : \"X\";\n    this.bestMove(this.state.board, comp);\n    //console.log(this.state);\n    this.checkWinner();\n  }\n}\nelse {\n  if(this.state.player === this.state.human) {\n    if(this.state.board[index] === null) {\n      newBoard[index] = this.state.player;\n      //let newPlayer = this.state.player === \"X\" ? \"O\" : \"X\";\n\n      this.setState({\n        board: newBoard\n      });\n      this.checkWinner();\n      //let fluff = <Computer board= {this.state.board} checkWinner={() => this.checkWinner()}\n      //setBoard={(e) => this.setBoard(e)} />\n      this.bestMove(this.state.board, this.state.computer);\n      //console.log(this.state);\n      this.checkWinner();\n    }\n  }\n}\n}*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}